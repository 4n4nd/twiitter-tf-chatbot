apiVersion: v1
kind: Template

metadata:
  name: twitter-tensorflow-bot-template
  annotations:
    description: "This is a bot to connect tensorflow model serving to a twitter bot"
    openshift.io/display-name: "Twitter Tensorflow Bot"
    version: 0.1.0
    tags: twitter,tensorflow,serving
    template.openshift.io/documentation-url: https://github.com/4n4nd/twiitter-tf-chatbot
  labels:
    application: ${APPLICATION_NAME}
    template: ${APPLICATION_NAME}-template
    app: ${APPLICATION_NAME}

parameters:
- description: The name for application
  value: 'twitter-chatbot-demo'
  name: APPLICATION_NAME
  required: true
- name: GIT_URI
  value: https://github.com/4n4nd/twiitter-tf-chatbot.git
  required: true
- name: FLT_DEBUG_MODE
  description: Enable verbose log for debugging
  value: '0'
  required: false
- name: TWITTER_CONSUMER_KEY
  description: Consumer key for the twitter account being used
  required: true
- name: TWITTER_CONSUMER_SECRET
  description: Consumer Secret for the twitter account being used
  required: true
- name: TWITTER_ACCESS_TOKEN
  description: Access Token for the twitter account being used
  required: true
- name: TWITTER_ACCESS_TOKEN_SECRET
  description: Access Token Secret for the twitter account being used
  required: true
- name: TF_SERVER_URL
  description: url for the tensorflow model serving REST API
  required: true

objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    dockerImageRepository: ${APPLICATION_NAME}
    tags:
    - name: latest
    lookupPolicy:
      local: true

- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    resources:
      limits:
        memory: 1Gi
        cpu: "1"
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    source:
      git:
        uri: ${GIT_URI}
      type: Git
    strategy:
      type: Source
      sourceStrategy:
        env:
        - name: APP_FILE
          value: 'app.py'
        - name: GIT_SSL_NO_VERIFY
          value: 'true'
        - name: ENABLE_PIPENV
          value: '1'
        forcePull: true
        from:
          kind: DockerImage
          name: 'docker.io/centos/python-36-centos7:latest'
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      deploymentConfig: ${APPLICATION_NAME}
      app: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          deploymentConfig: ${APPLICATION_NAME}
          app: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: TWITTER_CONSUMER_KEY
            value: "${TWITTER_CONSUMER_KEY}"
          - name: TWITTER_CONSUMER_SECRET
            value: "${TWITTER_CONSUMER_SECRET}"
          - name: TWITTER_ACCESS_TOKEN
            value: "${TWITTER_ACCESS_TOKEN}"
          - name: TWITTER_ACCESS_TOKEN_SECRET
            value: "${TWITTER_ACCESS_TOKEN_SECRET}"
          - name: TF_SERVER_URL
            value: "${TF_SERVER_URL}"
          - name: FLT_DEBUG_MODE
            value: "${FLT_DEBUG_MODE}"
          image: ${APPLICATION_NAME}
          imagePullPolicy: IfNotPresent
          name: ${APPLICATION_NAME}
          resources:
            requests:
              memory: 1Gi
              cpu: "2"
            limits:
              memory: 2Gi
              cpu: "2"
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}-service
    labels:
      app: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 8080
      name: http
    selector:
      app: ${APPLICATION_NAME}

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: ${APPLICATION_NAME}-route
    labels:
      app: ${APPLICATION_NAME}
  spec:
    to:
      kind: Service
      name: ${APPLICATION_NAME}-service
    tls:
      termination: edge
